<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/giftlink-backend/routes/giftRoutes.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/giftlink-backend/routes/giftRoutes.js" />
              <option name="originalContent" value="/*jshint esversion: 8 */&#10;const express = require('express');&#10;const router = express.Router();&#10;const connectToDatabase = require('../models/db');&#10;const { ObjectId } = require('mongodb');&#10;&#10;router.get('/', async (req, res) =&gt; {&#10;    try {&#10;        // Task 1: Connect to MongoDB and store connection to db constant&#10;        const db = await connectToDatabase();&#10;&#10;        // Task 2: use the collection() method to retrieve the gift collection&#10;        const giftsCollection = db.collection('gifts');&#10;&#10;        // Task 3: Fetch all gifts using the collection.find method. Chain with toArray method to convert to JSON array&#10;        const gifts = await giftsCollection.find().toArray();&#10;&#10;        // Task 4: return the gifts using the res.json method&#10;        res.json(gifts);&#10;    } catch (e) {&#10;        console.error('Error fetching gifts:', e);&#10;        res.status(500).send('Error fetching gifts');&#10;    }&#10;});&#10;&#10;router.get('/:id', async (req, res) =&gt; {&#10;    try {&#10;        // Task 1: Connect to MongoDB and store connection to db constant&#10;        const db = await connectToDatabase();&#10;&#10;        // Task 2: use the collection() method to retrieve the gift collection&#10;        const giftsCollection = db.collection('gifts');&#10;&#10;        const id = req.params.id;&#10;&#10;        // Task 3: Find a specific gift by ID using the collection.fineOne method and store in constant called gift&#10;        const gift = await giftsCollection.findOne({ _id: new ObjectId(id) });&#10;&#10;        if (!gift) {&#10;            return res.status(404).send('Gift not found');&#10;        }&#10;&#10;        res.json(gift);&#10;    } catch (e) {&#10;        console.error('Error fetching gift:', e);&#10;        res.status(500).send('Error fetching gift');&#10;    }&#10;});&#10;&#10;&#10;&#10;// Add a new gift&#10;router.post('/', async (req, res, next) =&gt; {&#10;    try {&#10;        const db = await connectToDatabase();&#10;        const collection = db.collection(&quot;gifts&quot;);&#10;        const gift = await collection.insertOne(req.body);&#10;&#10;        res.status(201).json(gift.ops[0]);&#10;    } catch (e) {&#10;        next(e);&#10;    }&#10;});&#10;&#10;module.exports = router;&#10;" />
              <option name="updatedContent" value="/*jshint esversion: 8 */&#13;&#10;const express = require('express');&#13;&#10;const router = express.Router();&#13;&#10;const connectToDatabase = require('../models/db');&#13;&#10;const { ObjectId } = require('mongodb');&#13;&#10;&#13;&#10;router.get('/', async (req, res) =&gt; {&#13;&#10;    try {&#13;&#10;        // Task 1: Connect to MongoDB and store connection to db constant&#13;&#10;        const db = await connectToDatabase();&#13;&#10;&#13;&#10;        // Task 2: use the collection() method to retrieve the gift collection&#13;&#10;        const giftsCollection = db.collection('gifts');&#13;&#10;&#13;&#10;        // Task 3: Fetch all gifts using the collection.find method. Chain with toArray method to convert to JSON array&#13;&#10;        const gifts = await giftsCollection.find().toArray();&#13;&#10;&#13;&#10;        // Task 4: return the gifts using the res.json method&#13;&#10;        res.json(gifts);&#13;&#10;    } catch (e) {&#13;&#10;        console.error('Error fetching gifts:', e);&#13;&#10;        res.status(500).send('Error fetching gifts');&#13;&#10;    }&#13;&#10;});&#13;&#10;&#13;&#10;router.get('/:id', async (req, res) =&gt; {&#13;&#10;    try {&#13;&#10;        // Task 1: Connect to MongoDB and store connection to db constant&#13;&#10;        const db = await connectToDatabase();&#13;&#10;&#13;&#10;        // Task 2: use the collection() method to retrieve the gift collection&#13;&#10;        const giftsCollection = db.collection('gifts');&#13;&#10;&#13;&#10;        const id = req.params.id;&#13;&#10;&#13;&#10;        // Task 3: Find a specific gift by ID using the collection.findOne method and store in constant called gift&#13;&#10;        const gift = await giftsCollection.findOne({ id: id });&#13;&#10;&#13;&#10;        if (!gift) {&#13;&#10;            return res.status(404).send('Gift not found');&#13;&#10;        }&#13;&#10;&#13;&#10;        res.json(gift);&#13;&#10;    } catch (e) {&#13;&#10;        console.error('Error fetching gift:', e);&#13;&#10;        res.status(500).send('Error fetching gift');&#13;&#10;    }&#13;&#10;});&#13;&#10;&#13;&#10;&#13;&#10;&#13;&#10;// Add a new gift&#13;&#10;router.post('/', async (req, res, next) =&gt; {&#13;&#10;    try {&#13;&#10;        const db = await connectToDatabase();&#13;&#10;        const collection = db.collection(&quot;gifts&quot;);&#13;&#10;        const gift = await collection.insertOne(req.body);&#13;&#10;&#13;&#10;        res.status(201).json(gift.ops[0]);&#13;&#10;    } catch (e) {&#13;&#10;        next(e);&#13;&#10;    }&#13;&#10;});&#13;&#10;&#13;&#10;module.exports = router;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/giftlink-frontend/src/config.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/giftlink-frontend/src/config.js" />
              <option name="originalContent" value="const config = {&#10;  backendUrl: process.env.REACT_APP_BACKEND_URL,&#10;};&#10;&#10;console.log(`backendUrl in config.js: ${config.backendUrl}`)&#10;export {config as urlConfig}&#10;" />
              <option name="updatedContent" value="const config = {&#13;&#10;  backendUrl: process.env.REACT_APP_BACKEND_URL || 'http://localhost:3060',&#13;&#10;};&#13;&#10;&#13;&#10;console.log(`backendUrl in config.js: ${config.backendUrl}`)&#13;&#10;export {config as urlConfig}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>